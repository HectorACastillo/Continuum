// Generated by gencpp from file continuum/MotorStatesResponse.msg
// DO NOT EDIT!


#ifndef CONTINUUM_MESSAGE_MOTORSTATESRESPONSE_H
#define CONTINUUM_MESSAGE_MOTORSTATESRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace continuum
{
template <class ContainerAllocator>
struct MotorStatesResponse_
{
  typedef MotorStatesResponse_<ContainerAllocator> Type;

  MotorStatesResponse_()
    : states()
    , err(0)  {
    }
  MotorStatesResponse_(const ContainerAllocator& _alloc)
    : states(_alloc)
    , err(0)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _states_type;
  _states_type states;

   typedef int32_t _err_type;
  _err_type err;





  typedef boost::shared_ptr< ::continuum::MotorStatesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::continuum::MotorStatesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct MotorStatesResponse_

typedef ::continuum::MotorStatesResponse_<std::allocator<void> > MotorStatesResponse;

typedef boost::shared_ptr< ::continuum::MotorStatesResponse > MotorStatesResponsePtr;
typedef boost::shared_ptr< ::continuum::MotorStatesResponse const> MotorStatesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::continuum::MotorStatesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::continuum::MotorStatesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::continuum::MotorStatesResponse_<ContainerAllocator1> & lhs, const ::continuum::MotorStatesResponse_<ContainerAllocator2> & rhs)
{
  return lhs.states == rhs.states &&
    lhs.err == rhs.err;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::continuum::MotorStatesResponse_<ContainerAllocator1> & lhs, const ::continuum::MotorStatesResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace continuum

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::continuum::MotorStatesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::continuum::MotorStatesResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::continuum::MotorStatesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::continuum::MotorStatesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::continuum::MotorStatesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::continuum::MotorStatesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::continuum::MotorStatesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "234b96902b9e5908267e7e3b9c5ca30f";
  }

  static const char* value(const ::continuum::MotorStatesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x234b96902b9e5908ULL;
  static const uint64_t static_value2 = 0x267e7e3b9c5ca30fULL;
};

template<class ContainerAllocator>
struct DataType< ::continuum::MotorStatesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "continuum/MotorStatesResponse";
  }

  static const char* value(const ::continuum::MotorStatesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::continuum::MotorStatesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] states\n"
"int32 err\n"
;
  }

  static const char* value(const ::continuum::MotorStatesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::continuum::MotorStatesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.states);
      stream.next(m.err);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorStatesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::continuum::MotorStatesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::continuum::MotorStatesResponse_<ContainerAllocator>& v)
  {
    s << indent << "states[]" << std::endl;
    for (size_t i = 0; i < v.states.size(); ++i)
    {
      s << indent << "  states[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.states[i]);
    }
    s << indent << "err: ";
    Printer<int32_t>::stream(s, indent + "  ", v.err);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTINUUM_MESSAGE_MOTORSTATESRESPONSE_H
