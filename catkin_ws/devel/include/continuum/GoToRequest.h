// Generated by gencpp from file continuum/GoToRequest.msg
// DO NOT EDIT!


#ifndef CONTINUUM_MESSAGE_GOTOREQUEST_H
#define CONTINUUM_MESSAGE_GOTOREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace continuum
{
template <class ContainerAllocator>
struct GoToRequest_
{
  typedef GoToRequest_<ContainerAllocator> Type;

  GoToRequest_()
    : rho(0.0)
    , theta(0.0)
    , speed(0.0)
    , K(0.0)
    , open(false)  {
    }
  GoToRequest_(const ContainerAllocator& _alloc)
    : rho(0.0)
    , theta(0.0)
    , speed(0.0)
    , K(0.0)
    , open(false)  {
  (void)_alloc;
    }



   typedef float _rho_type;
  _rho_type rho;

   typedef float _theta_type;
  _theta_type theta;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _K_type;
  _K_type K;

   typedef uint8_t _open_type;
  _open_type open;





  typedef boost::shared_ptr< ::continuum::GoToRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::continuum::GoToRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GoToRequest_

typedef ::continuum::GoToRequest_<std::allocator<void> > GoToRequest;

typedef boost::shared_ptr< ::continuum::GoToRequest > GoToRequestPtr;
typedef boost::shared_ptr< ::continuum::GoToRequest const> GoToRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::continuum::GoToRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::continuum::GoToRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::continuum::GoToRequest_<ContainerAllocator1> & lhs, const ::continuum::GoToRequest_<ContainerAllocator2> & rhs)
{
  return lhs.rho == rhs.rho &&
    lhs.theta == rhs.theta &&
    lhs.speed == rhs.speed &&
    lhs.K == rhs.K &&
    lhs.open == rhs.open;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::continuum::GoToRequest_<ContainerAllocator1> & lhs, const ::continuum::GoToRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace continuum

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::continuum::GoToRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::continuum::GoToRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::continuum::GoToRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::continuum::GoToRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::continuum::GoToRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::continuum::GoToRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::continuum::GoToRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "75c20413a91d30143195a114ac1b0a33";
  }

  static const char* value(const ::continuum::GoToRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x75c20413a91d3014ULL;
  static const uint64_t static_value2 = 0x3195a114ac1b0a33ULL;
};

template<class ContainerAllocator>
struct DataType< ::continuum::GoToRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "continuum/GoToRequest";
  }

  static const char* value(const ::continuum::GoToRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::continuum::GoToRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 rho\n"
"float32 theta\n"
"float32 speed\n"
"float32 K\n"
"bool open\n"
;
  }

  static const char* value(const ::continuum::GoToRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::continuum::GoToRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rho);
      stream.next(m.theta);
      stream.next(m.speed);
      stream.next(m.K);
      stream.next(m.open);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GoToRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::continuum::GoToRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::continuum::GoToRequest_<ContainerAllocator>& v)
  {
    s << indent << "rho: ";
    Printer<float>::stream(s, indent + "  ", v.rho);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "K: ";
    Printer<float>::stream(s, indent + "  ", v.K);
    s << indent << "open: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.open);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTINUUM_MESSAGE_GOTOREQUEST_H
